

# Unit 4: Social network


# Criteria A: Planning


## Problem definition

## Proposed Solution
### Design Statement


### RATIONALE



## Success Criteria
1. 
2.
3.
4.
5.

# Criteria B: Design
## System Diagram


## Wireframe

## UML Diagram

## ER Diagram


## Flow Diagrans




## Test Plan
| Description                                 	| Type                            	| Inputs                                                                             	| Outputs                                                                                                  	|
|---------------------------------------------	|---------------------------------	|------------------------------------------------------------------------------------	|----------------------------------------------------------------------------------------------------------	|



## Record of Tasks
| Task No 	| Planned Action                                                                                                                 	| Planned Outcome                                                                                                       	| Time estimate 	| Target completion date 	| Criterion 	|
|---------	|--------------------------------------------------------------------------------------------------------------------------------	|-----------------------------------------------------------------------------------------------------------------------	|---------------	|------------------------	|-----------	|
| 1       	| meeting with client                                                                                                            	| Start collecting the context of the problem                                                                           	| 6min          	| 7 february             	| A         	|

## Existing tools

| Software/Development tools    	| Coding Structure Tools        	| Libraries         	|
|-------------------------------	|-------------------------------	|-------------------	|
| PyCharm professional 2022.3.2 	| OOP Structures (classes)      	| Kivymd.app        	|
| Python                        	| SQL requests                  	| sqlite3           	|
| SQlite                        	| Database                      	| passlib           	|
| KivyMD                        	| Encryption                    	| re                	|
| Github Copilot                	| For loops                     	| database_handler  	|
|                                 	| If-else statements            	| encrypto_password 	|
|                               	| ORM (Object Relation Mapping) 	|                   	|
|                               	| Index                         	|                   	|

## Development
### Success criteria 1: The solution should enable users to track their daily habits, including working out, studying, reading, journaling, water intake and sleeping.
To fullfill this criteria I created a a screen that enables users to track their daily habits, such as working out, studying, reading, journaling, water intake, and sleeping. The screen uses the KivyMD library to create six checkboxes for users to check the habits they achieved. And also a text field for the user to input their daily reflections, a sliders to track how the user is feeling that day and a date picker to select the date.The show_date_picker method displays a date picker dialog when called. The on_save method is called when the user selects a date from the date picker dialog, and it sets the selected date to the date field on the screen.

Each checkbox has an ID assigned to it, and when clicked, the checkbox_click method is called with the checkbox instance, its value, and an index for the habit (0 to 5).The checks list stores the checkbox values (0 or 1) for all the habits, with the int() function to convert the boolean value of the checkbox (self.active) to an integer value (1 or 0). The save method retrieves the date, notes, overall rating, user ID, and habit values from the corresponding fields and checkboxes. It then calculates the total value of habits achieved and validates the date, note, and overall rating fields. If any of these fields are empty, an error message is displayed. If progress for the given date has already been added, another error message is displayed. Otherwise, the progress is inserted into the HABITS table in the database.

In summary, this code creates a screen with checkboxes for tracking daily habits and provides functionality for saving the progress to a database.
```.py
# Create a class for the screen
class add(MDScreen):
    # Initialize list to keep track of checkbox values
    checks = [0, 0, 0, 0, 0, 0]

    # Method to handle checkbox clicks
    def checkbox_click(self, instance, value, habits):
        # Update the value in the checks list based on checkbox clicked
        add.checks[habits] = int(value)

    # Method to save user's progress
    def save(self):
        # Get values entered by user
        day = self.ids.date.text
        note = self.ids.notes.text
        overal = self.ids.overal.text

        # Get user id and checkbox values 
        user_id = self.parent.get_screen('MainScreen').user_id
        gym = add.checks[0]
        study = add.checks[1]
        sleep = add.checks[2]
        read = add.checks[3]
        journal = add.checks[4]
        water = add.checks[5]

        # Calculate the total of the checkboxes
        total = gym + study + sleep + read + journal + water

        # If any of the required fields are missing, display an error dialog and return
        if not day or not note or not overal:
            dialog = MDDialog(title="Error", text="Please enter a valid date, note and overall rating")
            dialog.open()
            return

        # Check if progress for the current day has already been added
        db = database_handler("Project.db")
        query = f"SELECT id FROM HABITS WHERE user='{user_id}' AND date='{day}'"
        result = db.search(query)
        db.close()

        # If progress for the current day has already been added, display an error dialog and return
        if result:
            dialog = MDDialog(title="Error", text="You have already added progress for this date")
            dialog.open()
            return

        # Insert progress data into the database
        query = f"""INSERT INTO HABITS (user, date, gym, studying, sleeping, reading, journaling, water, notes,overal,total)
                    VALUES ('{user_id}', '{day}', '{gym}', '{study}', '{sleep}', '{read}', '{journal}', '{water}', '{note}','{overal}','{total}')"""
        db = database_handler("Project.db")
        db.run_save(query)
        db.close()

        # Display a success dialog
        dialog = MDDialog(title="Success", text="Congrats you updated your progress!")
        dialog.open()

    # Method to display a date picker dialog
    def show_date_picker(self):
        date_dialog = MDDatePicker()
        date_dialog.bind(on_save=self.on_save)
        date_dialog.open()

    # Method to update the selected date in the text field
    def on_save(self, instance, value, date_range):
        self.instance = instance
        self.value = value
        self.date_range = date_range
        self.ids.date.text = str(value)
```
### Success criteria 2:The solution must be designed with security and privacy in mind, with measures to protect the user's data.
To protect users data I created a log in and registration system focusing on security, using the following methods:
-Password hashing: When a user registers, their password is hashed before being stored in the database. This is important because it ensures that even if an attacker gains access to the database, they won't be able to see the user's actual password.
-Regular expression pattern matching: The code includes regular expression pattern matching to ensure that the user enters a valid email address and a strong password that meets specific criteria. This helps to prevent malicious attacks that rely on weak passwords or email spoofing.
-Error handling: The code includes error handling to catch any exceptions that might occur during the login or registration process. This helps to prevent sensitive information from being leaked in error messages.
-Dialogue boxes: The code displays dialogue boxes for certain actions, such as when a user successfully registers or enters an incorrect username or password. This helps to prevent sensitive information from being displayed on the screen.


```.py
# Define the LoginScreen class that inherits from MDScreen
class LoginScreen(MDScreen):

    # Method for trying to login
    def try_login(self):
    # Get the input username and password
    uname = self.ids.uname.text
    passwd = self.ids.passwd.text

    # Connect to the database
    db = database_handler(namedb="Project.db")
    
    # Search for the user in the database
    query = f"SELECT id, password FROM users WHERE username = '{uname}'"
    result = db.search(query)

    # Check if the user exists and the password is correct
    if result and pwd_config.identify(result[0][1]) and check_password(result[0][1], passwd):
        # If the user exists and the password is correct, get the user ID from the database
        user_id = result[0][0]  
        
        # Set the user ID as an attribute of the MainScreen instance
        self.parent.get_screen('MainScreen').user_id = user_id  
        
        # Switch to the MainScreen
        self.parent.current = "MainScreen"
        
        # Reset the input fields
        self.ids.uname.text = ""
        self.ids.passwd.text = ""

    else:
        # If the user does not exist or the password is incorrect, show an error dialog
        dialog = MDDialog(title="Incorrect password or username. Try again")
        dialog.open()
        
        # Reset the input fields
        self.ids.uname.text = ""
        self.ids.passwd.text = ""

```
The LoginScreen class has a method try_login() which is called when the user tries to login. It first retrieves the username and password entered by the user from the input fields. Then it connects to a database named "Project.db" and searches for a user with the given username in the database. If the user is found and the entered password matches with the password stored in the database, it retrieves the user ID from the database and sets it as an attribute of the MainScreen instance. Finally, it switches to the MainScreen and resets the input fields. If the user is not found or the password is incorrect, it shows an error dialog and resets the input fields.
```.py
class RegistrationScreen(MDScreen):
    def try_register(self):
    pattern = r'^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$'
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    uname = self.ids.uname_in.text
    email = self.ids.email_in.text
    passwd = self.ids.passwd_in.text
    passwd_check = self.ids.passwd_check.text

    if uname == "":
        # Display a dialog if the username is empty
        dialog = MDDialog(title="Do not forget your username")
        dialog.open()

    elif not re.match(email_pattern, email):
        # Display a dialog if the email is not valid
        dialog = MDDialog(title="Enter a valid email")
        dialog.open()

    elif not re.match(pattern, passwd):
        # Display a dialog if the password does not follow the requirements
        dialog = MDDialog(title="Password doesn't meet the requirements",
                          text="The password entered must be:\n- At least 8 characters,\n- One capital letter,\n- One lowercase letter,\n- One symbol: !@#$%^&*()_+")
        dialog.open()

    elif passwd != passwd_check:
        # Display a dialog if the password does not match the confirmation password
        dialog = MDDialog(title="The password must match")
        dialog.open()

    else:
        # Hash the password and insert the user's information into the database
        hash = hash_password(passwd)
        db = database_handler(namedb="Project.db")
        query = f"INSERT into users (email,password, username) values('{email}', '{hash}','{uname}')"
        db.run_save(query)
        db.close()
        
        # Display a dialog to notify the user that registration is complete
        print("Registration completed")
        self.parent.current = "LoginScreen"
        dialog = MDDialog(title="Congrats you created your account!")
        dialog.open()

```
The RegistrationScreen class has a method try_register() which is called when the user tries to register a new account. It first checks if the user has entered a valid username, email, password, and password check. Then it checks if the entered password meets certain requirements such as length, one capital letter, one lowercase letter, and one symbol. If the password meets the requirements and the password and password check fields match, it hashes the password and inserts the user details into the database. Finally, it shows a success dialog and switches to the LoginScreen. If the password does not meet the requirements or the passwords do not match, it shows an error dialog.


```.py
class TableScreen(MDScreen):
    # Class variable
    data_table = None

    def on_pre_enter(self, *args):
        # Create a data table with defined properties
        self.data_table = MDDataTable(
            size_hint=(.8, .5),
            pos_hint={"center_x": .5, "center_y": .5},
            use_pagination=False,
            check=True,
            # Define column names and widths
            column_data=[("id", 20),
                         ("USER", 20),
                         ("DATE", 20),
                         ("GYM", 20),
                         ("STUDY", 20),
                         ("SLEEP", 20),
                         ("READ", 20),
                         ("JOURNAL", 20),
                         ("WATER", 20),
                         ("NOTES", 20),
                         ("OVERALL", 20),
                         ("TOTAL", 20),

                         ]
        )

        # Bind row and check press events to their respective functions
        self.data_table.bind(on_row_press=self.row_pressed)
        self.data_table.bind(on_check_press=self.check_pressed)

        # Add the table to the GUI
        self.add_widget(self.data_table)

        # Call the update function to populate the table with data
        self.update()

    # Function to be called when a row is pressed
    def row_pressed(self, table, row):
        print("a row was pressed", row.text)

    # Function to be called when a check mark is pressed
    def check_pressed(self, table, current_row):
        print("a check mark was pressed", current_row)

    # Function to delete checked rows from the table and database
    def delete(self):
        checked_rows = self.data_table.get_row_checks()
        db = database_handler("Project.db")
        for r in checked_rows:
            id = r[0]
            query = f"delete from HABITS where id={id}"
            db.run_save(query)
        db.close()
        self.update()

    # Function to update the data table with habit data for the current user
    def update(self):
        # Get the current user ID from the main screen
        user_id = self.parent.get_screen('MainScreen').user_id

        # Query the database for habit data for the current user
        query = f"SELECT * FROM HABITS WHERE user={user_id}"
        db = database_handler("Project.db")
        data = db.search(query)
        db.close()

        # Update the data table with the retrieved data
        self.data_table.update_row_data(None, data)
        
  ```
The applications also protect user data by querying the database to retrieve only the information that pertains to the specific user who is currently logged in. This is achieved through the update method, where the user's ID is retrieved from the parent screen (MainScreen) and used in a database query to retrieve only rows from the HABITS table that have the matching user value. The retrieved data is then used to update the rows in the MDDataTable instance, ensuring that only the user's relevant data is displayed in the table.
By only displaying the relevant data for each user, the code helps to protect the privacy and security of their data by preventing other users from seeing or accessing their information.


### Success criteria 3: The solution must include a notes session for each day.
I have satisfied the criteria by implementing KivyMD widgets to create a label and a text field. The label prompts the user to input their notes by displaying the text "How was your day?" Additionally, the input is validated to detect cases where the user has not written anything and displays an error dialog accordingly.
```.kv
MDLabel:
                text:"How was your day?"
                font_size: 15
                halign:"center"
                md_bg_color:"#EEE9DA"

            MDTextField:

                id: notes
                text_color: "#050505"
                multiline: True
                size_hint_y: None
                height: dp(150)
                size_hint_x: None
                width: dp(200)
                pos_hint: {"center_x": .5, "center_y": .9}
```

### Success criteria 4: The solution must provide a way for the user to vizualize their progress.
To fulfill this criteria, I have created a screen named "TableScreen" which contains a data table to visualize the progress of the user. The table is implemented using KivyMD's MDDataTable widget. The screen also includes functions to handle events when a row or check mark is pressed. To improve the users experience while using the app,I created a function to delete a row, whena ow is checked , it gets the checked rows using the get_row_checks method of the data table widget and deletes them from the database using an SQL query.

Finally, the update function is used to populate the table with data. It first retrieves the user ID from the main screen and then queries the database for habit data for that user. The data is then updated in the table using the update_row_data method of the data table widge, and only showing the data of that specific user.
KV file:
```.kv
<TableScreen>:
    FitImage:
        source:"inicio.png"

    MDLabel:
        text: "YOUR PROGRESS"
        font_size: 30
        halign: "center"
        pos_hint: {"center_x": .5, "center_y": .8}

    MDRoundFlatIconButton:
        id: delete
        text: "Delete one day"
        md_bg_color:"#c7f0d0"
        on_press:root.delete()
        pos_hint: {"center_x": .8, "center_y": .2}

    MDBoxLayout:
        orientation: "horizontal"
        size_hint: 1,.2

        MDRoundFlatIconButton:
            text: "GO BACK"
            md_bg_color: "#c7f0d0"
            icon: "logout"
            on_press: root.parent.current = "MainScreen"
            text_color: 'FFFFFF'
            pos_hint: {"center_x": .1, "center_y": .15}
```
PY file:
```.py
class TableScreen(MDScreen):
    # Class variable
    data_table = None

    def on_pre_enter(self, *args):
        # Create a data table with defined properties
        self.data_table = MDDataTable(
            size_hint=(.8, .5),
            pos_hint={"center_x": .5, "center_y": .5},
            use_pagination=False,
            check=True,
            # Define column names and widths
            column_data=[("id", 20),
                         ("USER", 20),
                         ("DATE", 20),
                         ("GYM", 20),
                         ("STUDY", 20),
                         ("SLEEP", 20),
                         ("READ", 20),
                         ("JOURNAL", 20),
                         ("WATER", 20),
                         ("NOTES", 20),
                         ("OVERALL", 20),
                         ("TOTAL", 20),

                         ]
        )

        # Bind row and check press events to their respective functions
        self.data_table.bind(on_row_press=self.row_pressed)
        self.data_table.bind(on_check_press=self.check_pressed)

        # Add the table to the GUI
        self.add_widget(self.data_table)

        # Call the update function to populate the table with data
        self.update()

    # Function to be called when a row is pressed
    def row_pressed(self, table, row):
        print("a row was pressed", row.text)

    # Function to be called when a check mark is pressed
    def check_pressed(self, table, current_row):
        print("a check mark was pressed", current_row)

    # Function to delete checked rows from the table and database
    def delete(self):
        checked_rows = self.data_table.get_row_checks()
        db = database_handler("Project.db")
        for r in checked_rows:
            id = r[0]
            query = f"delete from HABITS where id={id}"
            db.run_save(query)
        db.close()
        self.update()

    # Function to update the data table with habit data for the current user
    def update(self):
        # Get the current user ID from the main screen
        user_id = self.parent.get_screen('MainScreen').user_id

        # Query the database for habit data for the current user
        query = f"SELECT * FROM HABITS WHERE user={user_id}"
        db = database_handler("Project.db")
        data = db.search(query)
        db.close()

        # Update the data table with the retrieved data
        self.data_table.update_row_data(None, data)

```
# Criteria D: Functionality
## A video demonstrating the proposed solution with narration


https://user-images.githubusercontent.com/111819437/225452470-730bb263-d6d0-4a6c-93db-d38ae4a59037.mov



### Citations
"Why Choose Python." Python.org, Python Software Foundation, https://www.python.org/about/gettingstarted/. Accessed 9 Mar. 2023.

Lucidchart. "Diagram Maker & Visual Solution." Lucidchart, Lucid Software Inc., 2023, https://www.lucidchart.com/. Acessed 9 Mar. 2023 

Free Design Tool: Presentations, Video, Social Media | Canva, https://www.canva.com/. Accessed 9 March 2023.

JetBrains. PyCharm Professional. Version 2023.3.2, JetBrains, 2023. Accessed Mar. 9 2023 

“Building a Simple Application using KivyMD in Python.” GeeksforGeeks, 7 June 2022, https://www.geeksforgeeks.org/building-a-simple-application-using-kivymd-in-python/. Accessed 9 March 2023.

Elder, John. “Creating A Login Screen With KivyMD – Python Kivy GUI Tutorial #44 – KivyCoder.com.” KivyCoder.com, 22 March 2021, https://kivycoder.com/creating-a-login-screen-with-kivymd-python-kivy-gui-tutorial-44/. Accessed 9 March 2023.

“SQL Tutorial.” W3Schools, https://www.w3schools.com/sql/default.asp. Accessed 9 March 2023.

“Text Field — KivyMD documentation.” KivyMD's documentation, https://kivymd.readthedocs.io/en/0.104.1/components/text-field/index.html. Accessed 9 March 2023.
